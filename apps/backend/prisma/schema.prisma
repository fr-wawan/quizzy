// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  quizzes      Quiz[]
  quizSessions QuizSession[]
  participants Participant[]
}

model Quiz {
  id           Int           @id @default(autoincrement())
  title        String
  description  String        @db.Text
  author       User          @relation(fields: [authorId], references: [id])
  authorId     Int
  isPublic     Boolean       @default(true)
  status       QuizStatus    @default(DRAFT)
  questions    Question[]
  quizSessions QuizSession[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

enum QuizStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Question {
  id           Int          @id @default(autoincrement())
  quiz         Quiz         @relation(fields: [quizId], references: [id])
  quizId       Int
  questionText String       @db.Text
  questionType QuestionType @default(MULTIPLE_CHOICE)
  points       Int          @default(1)
  timeLimitSec Int?
  choices      Choice[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  answers      Answer[]
}

model Choice {
  id         Int       @id @default(autoincrement())
  question   Question  @relation(fields: [questionId], references: [id])
  questionId Int
  choiceText String    @db.Text
  isCorrect  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  answers    Answer[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

model QuizSession {
  id           Int               @id @default(autoincrement())
  quiz         Quiz              @relation(fields: [quizId], references: [id])
  quizId       Int
  host         User              @relation(fields: [hostId], references: [id])
  hostId       Int
  classCode    String            @db.VarChar(10)
  startedAt    DateTime
  endedAt      DateTime?
  status       QuizSessionStatus @default(WAITING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants Participant[]

  @@unique([classCode])
}

enum QuizSessionStatus {
  WAITING
  ACTIVE
  FINISHED
}

model Participant {
  id          Int         @id @default(autoincrement())
  quizSession QuizSession @relation(fields: [sessionId], references: [id])
  sessionId   Int
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  score       Int         @default(0)
  joinedAt    DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  answers     Answer[]

  @@unique([sessionId, userId])
}

model Answer {
  id            Int         @id @default(autoincrement())
  participant   Participant @relation(fields: [participantId], references: [id])
  participantId Int
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    Int
  choice        Choice?     @relation(fields: [choiceId], references: [id])
  choiceId      Int?
  isCorrect     Boolean
  answeredAt    DateTime    @default(now())
}
